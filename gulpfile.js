'use strict';

var gulp = require('gulp'),
    browserify = require('gulp-browserify'),
	minifyHTML = require('gulp-minify-html'),
    concat = require('gulp-concat'),
    del = require('del'),
	imagemin = require('gulp-imagemin'),
    sass = require('gulp-sass'),
    autoprefixer = require('gulp-autoprefixer'),
	ts = require('gulp-typescript'),
	browserSync = require('browser-sync').create();

/**
 * BROWSER-SYNC Task
 */
gulp.task('browser-sync', function() {
	browserSync.init({
		server: {
			baseDir: "./build"
		}
	});
});

/*************************************/

// 				 CLEAN 		 		//

/*************************************/

/**
 * BUILD-CLEAN-ALL Task
 * 
 * Delete the folder that contains all the build files.
 */
gulp.task('build-clean-all', function () {
	return del(['./build']);
});

/**
 * BUILD-CLEAN-BUNDLE-JS Task
 * 
 * Delete the folder that contains all the build files.
 */
gulp.task('build-clean-bundle-js', function () {
	return del(['./build/js/bundle.js', './build/js/bundle.js.map']);
});

/*************************************/

// 		HTML, STYLE AND IMAGE 		//

/*************************************/

/**
 * BUILD-SCSS Task
 * 
 * Compile all the SCSS files and put them into build folder.
 */
gulp.task('build-scss', function () {
	gulp.src('./app/**/assets/*.scss')
		.pipe(sass({ onError: function (e) { console.log(e); } }))
		.pipe(autoprefixer('last 2 versions', '> 1%', 'ie 8'))
		.pipe(gulp.dest('./build/css/'))
		.pipe(browserSync.stream());
});

/**
 * BUILD-MINIFY-HTML Task
 * 
 * Minify all the HTML files and put them into build folder.
 */
gulp.task('build-minify-html', function () {
	var opts = {
        conditionals: true,
        spare:true
    };
	
	gulp.src('./app/index.html')
		.pipe(minifyHTML(opts))
		.pipe(gulp.dest('./build/'))
		.pipe(browserSync.stream());

	gulp.src('./app/**/views/**/*.html')
		.pipe(minifyHTML(opts))
		.pipe(gulp.dest('./build/views/'))
		.pipe(browserSync.stream());
});

/**
 * BUILD-MINIFY-IMAGE Task
 * 
 * Minify all the HTML files and put them into build folder.
 */
gulp.task('build-minify-image', function(){
    return gulp.src('./app/**/images/**/*.+(png|jpg|gif|svg)')
        .pipe(imagemin())
        .pipe(gulp.dest('./build/images'))
		.pipe(browserSync.stream());
});

/*************************************/

// 			   JAVASCRIPT		 	//

/*************************************/

/**
 * BUILD-TYPESCRIPT Task
 * 
 * Compile all the typescript files and bundle them to build folder.
 */
var tsProject = ts.createProject('tsconfig.json', { sourceMap: true });

gulp.task('build-typescript', function() {
    var tsResult = tsProject.src()
		.pipe(ts(tsProject));
    return tsResult.js.pipe(gulp.dest('.'));
});

/**
 * BUILD-BROWSERIFY Task
 * 
 * Browserify the bundle.js file generated by typescript compiler and include dependencies into it.
 */
/*gulp.task('build-browserify', function () {
	gulp.src('./build/js/bundle.js')
		.pipe(browserify({
			insertGlobals : false,
			debug : false
		}))
		.pipe(gulp.dest('./build/js'))
		.pipe(browserSync.stream());
});*/

/*************************************/

// 			   WATCHERS			 	//

/*************************************/

gulp.task('build-watch-typescript', function() {
	gulp.watch(
		['./build/*.ts', './build/**/*.ts'],
		['build-typescript'],
		browserSync.reload
	);
});

gulp.task('build-watch-bundle-js', function() {
	gulp.watch(
		['./build/bundle.js'],
		['build-browserify', 'build-clean-bundle-js'],
		browserSync.reload
	);
});

gulp.task('build-watch-scss', function() {
	gulp.watch(
		['./app/**/assets/**/*.scss'],
		['build-scss'],
		browserSync.reload
	);
});

gulp.task('build-watch-html', function() {
	gulp.watch(
		['./app/*.html','./app/**/views/**/*.html'],
		['build-minify-html'],
		browserSync.reload
	);
});

gulp.task('build-watch-images', function() {
	gulp.watch(
		['./app/**/images/**/*..+(png|jpg|gif|svg)'],
		['build-minify-image'],
		browserSync.reload
	);
});

gulp.task('build-watch-runtime', [
	'build-watch-typescript',
	'build-watch-scss',
	'build-watch-html',
	'build-watch-images',
]);



gulp.task('build', [
	'build-scss',
	'build-minify-image',
	'build-minify-html',
	'build-typescript',
]);

gulp.task('default', [
	'build',
	'browser-sync',
	'build-watch-runtime'
]);

/*** TESTS ***/
var jasmine = require('gulp-jasmine'),
    jshint = require('gulp-jshint');

gulp.task('unit-test', function () {
    return gulp.src('./app/**/test/unit/**/*-unit.js')
        .pipe(jasmine());
});

gulp.task('lint-test', function() {
    return gulp.src(['./app/*.js', './app/**/*.js'])
        .pipe(jshint())
        .pipe(jshint.reporter('default'));
});

gulp.task('test', ['unit-test', 'lint-test']);